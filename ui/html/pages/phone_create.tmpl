{{define "title"}}Home - Phone Input{{end}}

{{define "main"}}
      <div class="max-w-md mx-auto bg-white rounded p-8 shadow-md">
        <h2 class="text-2xl font-semibold mb-6">Data No Telephone</h2>
        <form class="flex flex-wrap" @submit.prevent="submitForm">
          <div class="w-full mb-4">
            <label for="phone_number" class="block text-gray-600 text-sm font-medium mb-2">No Handphone</label>
            <input
                type="text"
                id="phone_number"
                name="phone_number"
                v-model="formData.phone_number"
                class="w-full px-3 py-2 border rounded-md focus:outline-none focus:border-blue-500"
            />

            <p v-if="errorFields.phone_number" class="text-red-500 text-xs italic">${ errorFields.phone_number }</p>
          </div>

          <div class="w-full mb-4">
            <label for="provider" class="block text-gray-600 text-sm font-medium mb-2">Provider</label>
            <select
                id="provider"
                name="provider"
                v-model="formData.provider"
                class="w-full px-3 py-2 border rounded-md focus:outline-none focus:border-blue-500"
            >
              <option value="">-- Pilih --</option>
              {{range $key, $val := .PhoneProviders }}
                   <option value="{{$key}}">{{$val}}</option>
              {{end}}
            </select>

            <p v-if="errorFields.provider" class="text-red-500 text-xs italic">${ errorFields.provider }</p>
          </div>

          <button type="submit" class="bg-blue-500 mr-2 text-white py-2 px-4 rounded-md mb-4 md:mb-0 hover:bg-blue-600 focus:outline-none focus:bg-blue-600">Save</button>
          <button
            type="button"
            class="bg-gray-300 text-gray-800 py-2 px-4 rounded-md hover:bg-gray-400 focus:outline-none focus:bg-gray-400"
            @click="autoFill"
          >
            Auto
          </button>
        </form>
      </div>
{{end}}

{{define "js"}}
    new Vue({
      el: '#app',
      delimiters: ['${', '}'],
      data: {
        formData: {
            provider: "",
            phone_number: "",
        },
        errorFields: {},
      },
      methods: {
        getAccessToken() {
            return document.cookie.split('; ').find(row => row.startsWith('accessToken=')).split('=')[1];
        },
        deleteCookie(name) {
            document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;`;
        },
        redirectToLogin() {
            this.deleteCookie('accessToken');
            window.location.href = '/login';
        },
        resetForm() {
            this.formData = { provider: "", phone_number: "" };
        },
        submitForm() {
          const phoneUrl = 'http://localhost:8000/v1/phones/';
          axios.post(phoneUrl, {
            phone_number: this.formData.phone_number,
            provider: this.formData.provider,
          }, {
            headers: {
                'Authorization': `Bearer ${this.getAccessToken()}`,
                'Content-Type': 'application/json',
            },
          }).then(response => {
            alert("success added.");
            this.resetForm();
            window.location.href = '/phones/output';
          }).catch(e => {
            const { status, data } = e.response;
            if (status === 401) {
                this.redirectToLogin();
                return;
            }
            if (status === 422) {
                this.errorFields = data.error;
            }
          });
        },
        autoFill() {
          const phoneUrl = 'http://localhost:8000/v1/phones-auto/';
          axios.post(phoneUrl, null, {
            headers: {
              'Authorization': `Bearer ${this.getAccessToken()}`,
              'Content-Type': 'application/json',
            },
          }).then(response => {
            const { phone_number, provider } = response.data;

            this.formData.phone_number = phone_number;
            this.formData.provider = provider;

          }).catch(error => {
            const { status, data } = e.response;
            if (status === 401) {
                this.redirectToLogin();
                return;
            }
            if (status === 422) {
                this.errorFields = data.error;
            }
          });
        }
      }
    });
{{end}}